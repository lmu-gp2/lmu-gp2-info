[
  {
    "objectID": "rco.html",
    "href": "rco.html",
    "title": "R, RStudio, und Packages",
    "section": "",
    "text": "https://cran.rstudio.com/\n\nR ist die Software, welche die Berechnungen (“unter der Motorhaube”) durchführt\nR heißt auch die Programmiersprache, welche von der Software genutzt wird"
  },
  {
    "objectID": "rco.html#r-rstudio-und-packages",
    "href": "rco.html#r-rstudio-und-packages",
    "title": "R und co.",
    "section": "",
    "text": "https://cran.rstudio.com/\n\nR ist die Software, welche die Berechnungen (“unter der Motorhaube”) durchführt\nR heißt auch die Programmiersprache, welche von der Software genutzt wird\n\n\n\n\nhttps://posit.co/download/rstudio-desktop/\n\nWir nutzen RStudio, um mit R zu arbeiten, da die Software mehr Funktionalität anbietet\nWir brauchen trotzdem R, da RStudio auf unsere R-Installation zugreift\n\n\n\n\nEine besondere Stärke von R ist die Möglichkeit Packages zu nutzen, die in Libraries zur Verfügung gestellt werden (das kann als synonym betrachtet werden).\nPackages stammen üblicherweise aus einer von zwei Quellen:\n\nCRAN: Diese Packages können direkt in RStudio installiert werden via install.packages(\"libraryname\") bzw über den Reiter Packages &gt; Install\nGithub: Manche packages werden auf Github zur Verfügung gestellt. In der Regel gibt es auf deren Github-Seite eine Anleitung, wie sie über die RStudio-Console installiert werden, z.B.\n\n# Install remotes if necessary\nif (!requireNamespace(\"remotes\")) install.packages(\"remotes\")\n# Get package from Github\nremotes::install_github(\"mrzdcmps/changeofevidence\")\n\n\n\nEs ist sinnvoll, die Software und Packages regelmäßig zu updaten."
  },
  {
    "objectID": "software.html",
    "href": "software.html",
    "title": "workshop_24-07-05",
    "section": "",
    "text": "https://cran.rstudio.com/\n\nR ist die Software, welche die Berechnungen (“unter der Motorhaube”) durchführt\nR heißt auch die Programmiersprache, welche von der Software genutzt wird\n\n\n\n\nhttps://posit.co/download/rstudio-desktop/\n\nWir nutzen RStudio, um mit R zu arbeiten, da die Software mehr Funktionalität anbietet\nWir brauchen trotzdem R, da RStudio auf unsere R-Installation zugreift\n\n\n\n\nEine besondere Stärke von R ist die Möglichkeit Packages zu nutzen, die in Libraries zur Verfügung gestellt werden (das kann als synonym betrachtet werden).\nPackages stammen üblicherweise aus einer von zwei Quellen:\n\nCRAN: Diese Packages können direkt in RStudio installiert werden via install.packages(\"libraryname\") bzw über den Reiter Packages &gt; Install\nGithub: Manche packages werden auf Github zur Verfügung gestellt. In der Regel gibt es auf deren Github-Seite eine Anleitung, wie sie über die RStudio-Console installiert werden, z.B.\n\n# Install remotes if necessary\nif (!requireNamespace(\"remotes\")) install.packages(\"remotes\")\n# Get package from Github\nremotes::install_github(\"mrzdcmps/changeofevidence\")\n\n\n\nEs ist sinnvoll, die Software und Packages regelmäßig zu updaten."
  },
  {
    "objectID": "software.html#software",
    "href": "software.html#software",
    "title": "workshop_24-07-05",
    "section": "",
    "text": "https://cran.rstudio.com/\n\nR ist die Software, welche die Berechnungen (“unter der Motorhaube”) durchführt\nR heißt auch die Programmiersprache, welche von der Software genutzt wird\n\n\n\n\nhttps://posit.co/download/rstudio-desktop/\n\nWir nutzen RStudio, um mit R zu arbeiten, da die Software mehr Funktionalität anbietet\nWir brauchen trotzdem R, da RStudio auf unsere R-Installation zugreift\n\n\n\n\nEine besondere Stärke von R ist die Möglichkeit Packages zu nutzen, die in Libraries zur Verfügung gestellt werden (das kann als synonym betrachtet werden).\nPackages stammen üblicherweise aus einer von zwei Quellen:\n\nCRAN: Diese Packages können direkt in RStudio installiert werden via install.packages(\"libraryname\") bzw über den Reiter Packages &gt; Install\nGithub: Manche packages werden auf Github zur Verfügung gestellt. In der Regel gibt es auf deren Github-Seite eine Anleitung, wie sie über die RStudio-Console installiert werden, z.B.\n\n# Install remotes if necessary\nif (!requireNamespace(\"remotes\")) install.packages(\"remotes\")\n# Get package from Github\nremotes::install_github(\"mrzdcmps/changeofevidence\")\n\n\n\nEs ist sinnvoll, die Software und Packages regelmäßig zu updaten."
  },
  {
    "objectID": "rco.html#r",
    "href": "rco.html#r",
    "title": "R, RStudio, und Packages",
    "section": "",
    "text": "https://cran.rstudio.com/\n\nR ist die Software, welche die Berechnungen (“unter der Motorhaube”) durchführt\nR heißt auch die Programmiersprache, welche von der Software genutzt wird"
  },
  {
    "objectID": "rco.html#rstudio",
    "href": "rco.html#rstudio",
    "title": "R, RStudio, und Packages",
    "section": "RStudio",
    "text": "RStudio\nhttps://posit.co/download/rstudio-desktop/\n\nWir nutzen RStudio, um mit R zu arbeiten, da die Software mehr Funktionalität anbietet\nWir brauchen trotzdem R, da RStudio auf unsere R-Installation zugreift"
  },
  {
    "objectID": "rco.html#packages-libraries",
    "href": "rco.html#packages-libraries",
    "title": "R, RStudio, und Packages",
    "section": "Packages / Libraries",
    "text": "Packages / Libraries\nEine besondere Stärke von R ist die Möglichkeit Packages zu nutzen, die in Libraries zur Verfügung gestellt werden (das kann als synonym betrachtet werden).\nPackages stammen üblicherweise aus einer von zwei Quellen:\n\nCRAN: Diese Packages können direkt in RStudio installiert werden via install.packages(\"libraryname\") bzw über den Reiter Packages &gt; Install\nGithub: Manche packages werden auf Github zur Verfügung gestellt. In der Regel gibt es auf deren Github-Seite eine Anleitung, wie sie über die RStudio-Console installiert werden, z.B.\n\n# Install remotes if necessary\nif (!requireNamespace(\"remotes\")) install.packages(\"remotes\")\n# Get package from Github\nremotes::install_github(\"mrzdcmps/changeofevidence\")"
  },
  {
    "objectID": "rco.html#updates",
    "href": "rco.html#updates",
    "title": "R, RStudio, und Packages",
    "section": "Updates",
    "text": "Updates\nEs ist sinnvoll, die Software und Packages regelmäßig zu updaten.\n\n\n\n\n\n\nÜbungen\n\n\n\n\nInstalliere bzw. update R und RStudio\nInstalliere das Package tidyverse von CRAN\nInstalliere die Packages qpsy und changeofevidence von Github\nUpdate alle Packages in RStudio\n\n\n\n\n\n\n\n\n\nRessourcen\n\n\n\nIntroduction to R"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Willkommen",
    "section": "",
    "text": "Dieser Workshop richtet sich an Mitarbeiter und Doktoranden des Lehrstuhls Allgemeine Psychologie 2 der LMU München. Er soll einen Überblick liefern, wie\n\nRohdaten vom Webserver (qpsy) geladen werden\nNeue Analyseprojekte mit RStudio angelegt werden\nProjekte zur Kooperation über Github zur Verfügung gestellt werden\nExperimentalfiles aus den Rohdaten generiert werden\nErste Analysen der Daten erfolgen können\n\n\n\n\n\n\n\nTip\n\n\n\nStudierende können ebenso teilnehmen, können aber nicht Teil des Kooperationsnetzwerks auf Github werden."
  },
  {
    "objectID": "index.html#über-diesen-workshop",
    "href": "index.html#über-diesen-workshop",
    "title": "Willkommen",
    "section": "",
    "text": "Dieser Workshop richtet sich an Mitarbeiter und Doktoranden des Lehrstuhls Allgemeine Psychologie 2 der LMU München. Er soll einen Überblick liefern, wie\n\nRohdaten vom Webserver (qpsy) geladen werden\nNeue Analyseprojekte mit RStudio angelegt werden\nProjekte zur Kooperation über Github zur Verfügung gestellt werden\nExperimentalfiles aus den Rohdaten generiert werden\nErste Analysen der Daten erfolgen können\n\n\n\n\n\n\n\nTip\n\n\n\nStudierende können ebenso teilnehmen, können aber nicht Teil des Kooperationsnetzwerks auf Github werden."
  },
  {
    "objectID": "git.html",
    "href": "git.html",
    "title": "Git",
    "section": "",
    "text": "Git ist eine Software zur Dateiversionierung. Damit lassen sich Änderungen an Dateien nachverfolgen und wiederherstellen. Ein besonderer Vorteil ist die Möglichkeit, die Dateien online mit einem Dienst, wie z.B. Github zu synchronisieren. Dies ermöglicht dir den Zugriff auf stets aktuelle Daten und das Teilen der Dateien mit anderen, sowie ein kollaboratives Arbeiten.\nDu kannst für jeden Ordner auf deinem Rechner ein Git-Repositorium erstellen. Wir werden das für jedes Analyseprojekt tun, um die Projekte teilen und Änderungen an den Dateien nachvollziehen zu können."
  },
  {
    "objectID": "git.html#was-ist-git",
    "href": "git.html#was-ist-git",
    "title": "Git",
    "section": "",
    "text": "Git ist eine Software zur Dateiversionierung. Damit lassen sich Änderungen an Dateien nachverfolgen und wiederherstellen. Ein besonderer Vorteil ist die Möglichkeit, die Dateien online mit einem Dienst, wie z.B. Github zu synchronisieren. Dies ermöglicht dir den Zugriff auf stets aktuelle Daten und das Teilen der Dateien mit anderen, sowie ein kollaboratives Arbeiten.\nDu kannst für jeden Ordner auf deinem Rechner ein Git-Repositorium erstellen. Wir werden das für jedes Analyseprojekt tun, um die Projekte teilen und Änderungen an den Dateien nachvollziehen zu können."
  },
  {
    "objectID": "git.html#git-installieren",
    "href": "git.html#git-installieren",
    "title": "Git",
    "section": "Git installieren",
    "text": "Git installieren\nhttp://git-scm.com/downloads/ (Windows & Mac OS)\n\nWindows: Lade die .exe-Datei herunter, führe sie aus und akzeptiere alle Standardeinstellungen (es sei denn, Du weißt, was Du tust) und klicke immer wieder auf “weiter”.\nOS X: Wähle unter dem obigen Link die erste Option, die vorschlägt, Git über die Installation von Homebrew zu installieren, indem Du die Befehlszeile aus der Anleitung im Terminal einfügst und akzeptiere die in Ihrem Terminal erscheinenden Aufforderungen."
  },
  {
    "objectID": "git.html#git-konfigurieren",
    "href": "git.html#git-konfigurieren",
    "title": "Git",
    "section": "Git konfigurieren",
    "text": "Git konfigurieren\nNach der Installation von Git musst Du Git sagen, wer Du bist. Öffne dazu die bei Windows die Git-Bash (Start &gt; Git Bash) oder bei OS X die Terminal app und gib folgende Befehle ein. Ersetze dabei “Dein Name” und “Deine Email” durch deinen Namen und deine Email-Adresse.\ngit config --global user.name \"Dein Name\"\ngit config --global user.email \"deine@email.de\"\n\n\n\n\n\n\nTip\n\n\n\nNutze die gleiche Email-Adresse, die Du auch für Github verwenden wirst. Wenn du den Copilot nutzen willst, nimm die psy.lmu.de bzw. campus.lmu.de-Adresse.\n\n\n\n\n\n\n\n\nRessourcen\n\n\n\nIntroduction to version Control in R with RStudio, Git, and Github Happy Git and GitHub for the useR"
  },
  {
    "objectID": "github.html",
    "href": "github.html",
    "title": "Github",
    "section": "",
    "text": "Wir werden Github nutzen, um unsere Analyse-Repositorien zu speichern und zu teilen."
  },
  {
    "objectID": "github.html#account-erstellen",
    "href": "github.html#account-erstellen",
    "title": "Github",
    "section": "Account erstellen",
    "text": "Account erstellen\nErstelle ein Konto auf Github. Nutze dabei deine psy.lmu.de oder campus.lmu.de-Adresse."
  },
  {
    "objectID": "github.html#die-lmu-gp2-organisation",
    "href": "github.html#die-lmu-gp2-organisation",
    "title": "Github",
    "section": "Die LMU-GP2 Organisation",
    "text": "Die LMU-GP2 Organisation\nAlle Analyseprojekte werden in einem eigenen Git-Repositorium gespeichert. Um auf die Daten und Skripte der anderen zugreifen zu können, werden wir die Repositorien in der Github-Organisation LMU-GP2 speichern.\n\n\n\n\n\n\nÜbungen\n\n\n\n\nBitte Moritz, Teil der Organisation zu werden"
  },
  {
    "objectID": "github.html#verbinde-rstudio-mit-github",
    "href": "github.html#verbinde-rstudio-mit-github",
    "title": "Github",
    "section": "Verbinde RStudio mit Github",
    "text": "Verbinde RStudio mit Github\nUm uns über Programme, wie RStudio mit Github verbinden zu können, brauchen wir einen Personal Access Token, den wir anstelle eine Passworts verwenden.\nErstelle Dir einen Token auf https://github.com/settings/tokens/ und kopiere ihn zunächst in ein leeres Dokument (z.B. Editor).\nWenn wir gleich das erste Mal ein Projekt von Github klonen bzw. es abspeichern, gibst du einmalig den Token als Passwort ein. Auf diesem Rechner ist er dann gespeichert.\n\n\n\n\n\n\nRessourcen\n\n\n\nIntroduction to version Control in R with RStudio, Git, and Github Happy Git and GitHub for the useR"
  },
  {
    "objectID": "lmu-gp2.html",
    "href": "lmu-gp2.html",
    "title": "qpsy-Daten und LMU GP2-Projekte",
    "section": "",
    "text": "Wir haben folgende Quellen für Daten und Analyseprojekte:\n\n\nhttps://qpsy.de/data/\nDie Rohdaten aller Onlineexperimente werden auf unserem Webserver gespeichert (passwortgeschützt). Die Ordnerstruktur ist [experiment] / study[studypart], also z.B. [experiment] / study2 für den zweiten Teil einer Studie, etc.\nDie Anzahl an Versuchspersonenfiles kann auch ohne Passworteingabe nachgesehen werden, unter https://qpsy.de/count-ip.php?dir=[experiment], z.B. https://qpsy.de/count-ip.php?dir=testdata/study1\nManchmal sind die VP-Files innerhalb des Ordners in weiteren durchnummerierten Ordner gespeichert, welche dann den einzelnen Versuchsleitern entsprechen.\n\n\n\nWenn wir uns zum ersten Mal die Daten eines Forschungsprojekts ansehen, erstellen wir ein neues Projekt mit RStudio in einem neuen Ordner auf unserem Computer. Als Projektnamen entscheide ich mich in der Regel für den Projektnamen, so wie er auf dem Server gespeichert wird und hänge -analysis an, also z.B. testdata1-analysis für den ersten Studienteil des Experiments testdata.\nWir brauchen die Rohdaten nicht manuell vom Server herunterladen, sondern können das package qpsy dazu benutzen:\nlibrary(qpsy)\nraw &lt;- loadexp(\"testdata/study1\")\n\n\n\nhttps://github.com/lmu-gp2\nDamit die Analyseprojekte nachvollziehbar und vor allem teilbar sind, werden wir sie alle mit Github synchronisieren. Es macht generell also Sinn, erstmal in den Repositorien auf unserer Organisation LMU-GP2 nachzusehen, ob schon ein Analyseprojekt für das Experiment angelegt ist.\nJe nachdem, was der Fall ist, gibt es zwei unterschiedliche Workflows:\n\nEin vorhandenes Projekt klonen\nEin neues Projekt anlegen"
  },
  {
    "objectID": "lmu-gp2.html#orientierung",
    "href": "lmu-gp2.html#orientierung",
    "title": "qpsy-Daten und LMU GP2-Projekte",
    "section": "",
    "text": "Wir haben folgende Quellen für Daten und Analyseprojekte:\n\n\nhttps://qpsy.de/data/\nDie Rohdaten aller Onlineexperimente werden auf unserem Webserver gespeichert (passwortgeschützt). Die Ordnerstruktur ist [experiment] / study[studypart], also z.B. [experiment] / study2 für den zweiten Teil einer Studie, etc.\nDie Anzahl an Versuchspersonenfiles kann auch ohne Passworteingabe nachgesehen werden, unter https://qpsy.de/count-ip.php?dir=[experiment], z.B. https://qpsy.de/count-ip.php?dir=testdata/study1\nManchmal sind die VP-Files innerhalb des Ordners in weiteren durchnummerierten Ordner gespeichert, welche dann den einzelnen Versuchsleitern entsprechen.\n\n\n\nWenn wir uns zum ersten Mal die Daten eines Forschungsprojekts ansehen, erstellen wir ein neues Projekt mit RStudio in einem neuen Ordner auf unserem Computer. Als Projektnamen entscheide ich mich in der Regel für den Projektnamen, so wie er auf dem Server gespeichert wird und hänge -analysis an, also z.B. testdata1-analysis für den ersten Studienteil des Experiments testdata.\nWir brauchen die Rohdaten nicht manuell vom Server herunterladen, sondern können das package qpsy dazu benutzen:\nlibrary(qpsy)\nraw &lt;- loadexp(\"testdata/study1\")\n\n\n\nhttps://github.com/lmu-gp2\nDamit die Analyseprojekte nachvollziehbar und vor allem teilbar sind, werden wir sie alle mit Github synchronisieren. Es macht generell also Sinn, erstmal in den Repositorien auf unserer Organisation LMU-GP2 nachzusehen, ob schon ein Analyseprojekt für das Experiment angelegt ist.\nJe nachdem, was der Fall ist, gibt es zwei unterschiedliche Workflows:\n\nEin vorhandenes Projekt klonen\nEin neues Projekt anlegen"
  },
  {
    "objectID": "cloneproject.html",
    "href": "cloneproject.html",
    "title": "Ein Projekt klonen",
    "section": "",
    "text": "Beispiele:"
  },
  {
    "objectID": "cloneproject.html#vorgehen",
    "href": "cloneproject.html#vorgehen",
    "title": "Ein Projekt klonen",
    "section": "Vorgehen",
    "text": "Vorgehen\n1. Überprüfen, dass das Repo bereits auf Github angelegt ist\nhttps://github.com/orgs/lmu-gp2/repositories\n\n2. Den Link zum Repo kopieren\nAuf das Repositorium klicken, den grünen Code-Button anklicken und den Link mit dem Kopieren-Symbol in die Zwischenablage kopieren.\n\n3. Ein neues RStudio-Projekt “Version Control” anlegen und das Repo klonen\nRStudio &gt; New Project &gt; Version Control &gt; Git\n\nKopierten Link bei Repository URL einfügen und lokalen Speicherort aussuchen.\n\n4. Skript öffnen und loslegen\nDas R-Skript, z.B. testdata1.R öffnen und ausführen. Ihr habt jetzt das fertige Analyseprojekt auf Eurem Rechner!"
  },
  {
    "objectID": "newproject.html",
    "href": "newproject.html",
    "title": "Ein neues Projekt anlegen",
    "section": "",
    "text": "Ihr habt die verfügbaren Repositorien auf Github gecheckt und es gibt noch kein Analyseprojekt für die Daten. In diesem Fall, müsst ihr ein neues Projekt anlegen. Ich stelle Euch 2 Varianten vor."
  },
  {
    "objectID": "newproject.html#variante-1",
    "href": "newproject.html#variante-1",
    "title": "Ein neues Projekt anlegen",
    "section": "Variante 1",
    "text": "Variante 1\n1. Ein neues RStudio-Projekt anlegen und Git aktivieren\nRStudio &gt; New Project &gt; New Directory &gt; New Project\nSpeicherort und Projektnamen aussuchen und Create a git repository aktivieren.\n\nEin neuer Ordner mit dem Projektnamen wird erstellt und enthält die projektname.Rproj und .gitignore-Dateien.\n2. Daten herunterladen und analysieren\nErstellt ein neues R-Skript unter File &gt; New File &gt; R script und ladet die Rohdaten vom Server und analysiert drauf los.\nlibrary(qpsy)\nraw &lt;- loadexp(\"testdata/study1\")\nstr(raw)\nSpeichert das R-Skript, z.B. als testdata1.R\n3. Beginnt mit der Versionierung via Git"
  }
]