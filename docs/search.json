[
  {
    "objectID": "newproject.html",
    "href": "newproject.html",
    "title": "Ein neues Projekt anlegen",
    "section": "",
    "text": "Du hast die verfügbaren Repositorien auf Github gecheckt und es gibt noch kein Analyseprojekt für die Daten. In diesem Fall, musst du ein neues Projekt anlegen. Ich stelle Euch 2 Varianten vor.",
    "crumbs": [
      "Home",
      "Workflow",
      "Ein neues Projekt anlegen"
    ]
  },
  {
    "objectID": "newproject.html#variante-1",
    "href": "newproject.html#variante-1",
    "title": "Ein neues Projekt anlegen",
    "section": "Variante 1",
    "text": "Variante 1\n1. Ein neues RStudio-Projekt anlegen und Git aktivieren\nRStudio &gt; New Project &gt; New Directory &gt; New Project\nSpeicherort und Projektnamen aussuchen und Create a git repository aktivieren.\n\nEin neuer Ordner mit dem Projektnamen wird erstellt und enthält die projektname.Rproj und .gitignore-Dateien.\n2. Daten herunterladen und analysieren\nErstelle ein neues R-Skript unter File &gt; New File &gt; R script und lade die Rohdaten vom Server und analysiere drauf los.\nlibrary(qpsy)\nraw &lt;- loadexp(\"testdata/study1\")\nstr(raw)\nSpeicher das R-Skript, z.B. als testdata1.R\n3. Beginne mit der Versionierung via Git\nÖffne den Git tab oben rechts: Hier seht ihr, dass es neue, bisher unbekannte (untracked) Dateien gibt. Wir wollen die Versionierung für alle Dateien außer der config.yml aktivieren, da hier das Passwort für den Server gespeichert ist.\n\nWir können die config.yml igorieren (untracked lassen), oder Git mitteilen, dass sie ignoriert werden und gar nicht mehr in der Liste auftauchen soll. Dazu öffnen wir die .gitignore-Datei unter Files und ergänzen den Dateinamen.\n.Rproj.user\n.Rhistory\n.RData\n.Ruserdata\nconfig.yml\nNachdem wir gespeichert haben, verschwindet die config.yml in der Git-Übersicht.\nKlicke jetzt das Kästchen aller Dateien an, die getrackt werden sollen (in der Regel alle) und klicke auf Commit.\n\n\n\nGib in dem auftauchenden Fenster eine commit message ein - das muss man tun! - also z.B. testdata initialisieren und clicke erneut auf Commit.\n\n\nDas nächste Fenster zeigt dir den Fortschritt. Sobald alles fertig ist, kannst du es schließen und bist fertig!\n\n4. Das lokale Repo mit Github synchronisieren\nGehe in deinem Browser auf Github, logg dich ein und wähle Repositories im Menü. Klicke jetzt auf den grünen Button New.\nWähle als Owner lmu-gp2 und als Repository name [experiment]-analysis, also z.B. testdata1-analysis. Gib eine Description ein, wenn du möchtest, z.B. Testdata 1 und stelle das Repo zunächst auf Private. Klicke anschließend auf Create repository.\n\n\n\nDu hast jetzt ein lokales Repo und eines auf Github. Nun musst Du sie nur noch verbinden. Auf der nun erschienenen Seite steht der Befehl, den man braucht um …\n\n\n…or push an existing repository from the command line\ngit remote add origin https://github.com/lmu-gp2/testdata1-analysis.git\ngit branch -M main\ngit push -u origin main\nKopiere diesen Code mit Symbol, gehe in dein RStudio-Projekt und füge ihn unten im Terminal (nicht der Konsole) ein und bestätige mit Enter.\n\nWenn du die Github-Setie neu lädst, sind die Dateien jetzt vorhanden und können laufend synchronisiert werden.",
    "crumbs": [
      "Home",
      "Workflow",
      "Ein neues Projekt anlegen"
    ]
  },
  {
    "objectID": "newproject.html#variante-2",
    "href": "newproject.html#variante-2",
    "title": "Ein neues Projekt anlegen",
    "section": "Variante 2",
    "text": "Variante 2\nAutomatisiere diese Schritte indem du die addrepo.R abspeicherst und ausführst.\n1. Download addrepo.R\nSpeichere die Datei an einen bekannten Ort, am besten den übergeordneten Ordner der Analyseprojekte.\nÖffne Sie und gib Deine Github-Zugangsdaten für email, name und token ein.\n2. Erstelle ein klassisches R-Projekt\nSo wie man es kennt, ob Git bereits aktiviert ist oder nicht, spielt keine Rolle, da es nachaktiviert wird.\n3. Lade das Skript in Deinem R-Projekt\nÖffne das R-Projekt, in dem du ein Git-Repositorium initialisieren und mit Github synchronisieren willst und führe das Skript aus (z.B. in der Console). Wenn die Datei zum Beispiel im übergeordneten Ordner liegt mit:\nsource(\"../addrepo.R\")\n4. Gib die gefragten Details ein und bestätige\n\nRepository name: z.B. testdata1-analysis\nRepository description: z.B. Testdata 1\n\n5. Lade das Projekt neu\nLade das Projekt neu, indem du oben rechts auf den Projektnamen klickst und das Projekt erneut öffnest. Anschließend wird der Git-Tab angezeigt. Du bist jetzt synchronsiert.",
    "crumbs": [
      "Home",
      "Workflow",
      "Ein neues Projekt anlegen"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Willkommen",
    "section": "",
    "text": "Dieser Workshop richtet sich an Mitarbeiter und Doktoranden des Lehrstuhls Allgemeine Psychologie 2 der LMU München. Auch interessierte Studierende, die Ihre Abschlussarbeit am Lehrstuhl schreiben können teilnehmen. Er soll einen Überblick liefern, wie\n\nRohdaten vom Webserver (qpsy) geladen werden\nNeue Analyseprojekte mit RStudio angelegt werden\nProjekte zur Kooperation über Github zur Verfügung gestellt werden\nExperimentalfiles aus den Rohdaten generiert werden\nErste Analysen der Daten erfolgen können\n\n\n\n\n\n\n\nRessourcen\n\n\n\nIntroduction to R\nIntroduction to version Control in R with RStudio, Git, and Github\nCollaborative coding with GitHub and RStudio\nHappy Git and GitHub for the useR",
    "crumbs": [
      "Home",
      "Überblick"
    ]
  },
  {
    "objectID": "index.html#über-diesen-workshop",
    "href": "index.html#über-diesen-workshop",
    "title": "Willkommen",
    "section": "",
    "text": "Dieser Workshop richtet sich an Mitarbeiter und Doktoranden des Lehrstuhls Allgemeine Psychologie 2 der LMU München. Auch interessierte Studierende, die Ihre Abschlussarbeit am Lehrstuhl schreiben können teilnehmen. Er soll einen Überblick liefern, wie\n\nRohdaten vom Webserver (qpsy) geladen werden\nNeue Analyseprojekte mit RStudio angelegt werden\nProjekte zur Kooperation über Github zur Verfügung gestellt werden\nExperimentalfiles aus den Rohdaten generiert werden\nErste Analysen der Daten erfolgen können\n\n\n\n\n\n\n\nRessourcen\n\n\n\nIntroduction to R\nIntroduction to version Control in R with RStudio, Git, and Github\nCollaborative coding with GitHub and RStudio\nHappy Git and GitHub for the useR",
    "crumbs": [
      "Home",
      "Überblick"
    ]
  },
  {
    "objectID": "git.html",
    "href": "git.html",
    "title": "Git",
    "section": "",
    "text": "Git ist eine Software zur Dateiversionierung. Damit lassen sich Änderungen an Dateien nachverfolgen und wiederherstellen. Ein besonderer Vorteil ist die Möglichkeit, die Dateien online mit einem Dienst, wie z.B. Github zu synchronisieren. Dies ermöglicht dir den Zugriff auf stets aktuelle Daten und das Teilen der Dateien mit anderen, sowie ein kollaboratives Arbeiten.\nDu kannst für jeden Ordner auf deinem Rechner ein Git-Repositorium erstellen. Wir werden das für jedes Analyseprojekt tun, um die Projekte teilen und Änderungen an den Dateien nachvollziehen zu können.",
    "crumbs": [
      "Home",
      "Voraussetzungen",
      "Git"
    ]
  },
  {
    "objectID": "git.html#was-ist-git",
    "href": "git.html#was-ist-git",
    "title": "Git",
    "section": "",
    "text": "Git ist eine Software zur Dateiversionierung. Damit lassen sich Änderungen an Dateien nachverfolgen und wiederherstellen. Ein besonderer Vorteil ist die Möglichkeit, die Dateien online mit einem Dienst, wie z.B. Github zu synchronisieren. Dies ermöglicht dir den Zugriff auf stets aktuelle Daten und das Teilen der Dateien mit anderen, sowie ein kollaboratives Arbeiten.\nDu kannst für jeden Ordner auf deinem Rechner ein Git-Repositorium erstellen. Wir werden das für jedes Analyseprojekt tun, um die Projekte teilen und Änderungen an den Dateien nachvollziehen zu können.",
    "crumbs": [
      "Home",
      "Voraussetzungen",
      "Git"
    ]
  },
  {
    "objectID": "git.html#git-installieren",
    "href": "git.html#git-installieren",
    "title": "Git",
    "section": "Git installieren",
    "text": "Git installieren\nhttp://git-scm.com/downloads/ (Windows & Mac OS)\n\nWindows: Lade die .exe-Datei herunter, führe sie aus und akzeptiere alle Standardeinstellungen (es sei denn, Du weißt, was Du tust) und klicke immer wieder auf “weiter”.\nOS X: Wähle unter dem obigen Link die erste Option, die vorschlägt, Git über die Installation von Homebrew zu installieren, indem Du die Befehlszeile aus der Anleitung im Terminal einfügst und akzeptiere die in Ihrem Terminal erscheinenden Aufforderungen.",
    "crumbs": [
      "Home",
      "Voraussetzungen",
      "Git"
    ]
  },
  {
    "objectID": "git.html#git-konfigurieren",
    "href": "git.html#git-konfigurieren",
    "title": "Git",
    "section": "Git konfigurieren",
    "text": "Git konfigurieren\nNach der Installation von Git musst Du Git sagen, wer Du bist. Öffne dazu die bei Windows die Git-Bash (Start &gt; Git Bash) oder bei OS X die Terminal app und gib folgende Befehle ein. Ersetze dabei “Dein Name” und “Deine Email” durch deinen Namen und deine Email-Adresse.\ngit config --global user.name \"Dein Name\"\ngit config --global user.email \"deine@email.de\"\n\n\n\n\n\n\nTip\n\n\n\nNutze die gleiche Email-Adresse, die Du auch für Github verwenden wirst. Wenn du den Copilot nutzen willst, nimm die psy.lmu.de bzw. campus.lmu.de-Adresse.",
    "crumbs": [
      "Home",
      "Voraussetzungen",
      "Git"
    ]
  },
  {
    "objectID": "cloneproject.html",
    "href": "cloneproject.html",
    "title": "Ein Projekt klonen",
    "section": "",
    "text": "Beispiele:",
    "crumbs": [
      "Home",
      "Workflow",
      "Ein Projekt klonen"
    ]
  },
  {
    "objectID": "cloneproject.html#vorgehen",
    "href": "cloneproject.html#vorgehen",
    "title": "Ein Projekt klonen",
    "section": "Vorgehen",
    "text": "Vorgehen\n1. Überprüfen, dass das Repo bereits auf Github angelegt ist\nhttps://github.com/orgs/lmu-gp2/repositories\n\n2. Den Link zum Repo kopieren\nAuf das Repositorium klicken, den grünen Code-Button anklicken und den Link mit dem Kopieren-Symbol in die Zwischenablage kopieren.\n\n3. Ein neues RStudio-Projekt “Version Control” anlegen und das Repo klonen\nRStudio &gt; New Project &gt; Version Control &gt; Git\n\nKopierten Link bei Repository URL einfügen und lokalen Speicherort aussuchen.\n\n4. Skript öffnen und loslegen\nDas R-Skript, z.B. testdata1.R öffnen und ausführen. Ihr habt jetzt das fertige Analyseprojekt auf Eurem Rechner!",
    "crumbs": [
      "Home",
      "Workflow",
      "Ein Projekt klonen"
    ]
  },
  {
    "objectID": "github.html",
    "href": "github.html",
    "title": "Github",
    "section": "",
    "text": "Wir werden Github nutzen, um unsere Analyse-Repositorien zu speichern und zu teilen.",
    "crumbs": [
      "Home",
      "Voraussetzungen",
      "Github"
    ]
  },
  {
    "objectID": "github.html#account-erstellen",
    "href": "github.html#account-erstellen",
    "title": "Github",
    "section": "Account erstellen",
    "text": "Account erstellen\nErstelle ein Konto auf Github. Nutze dabei deine psy.lmu.de oder campus.lmu.de-Adresse.",
    "crumbs": [
      "Home",
      "Voraussetzungen",
      "Github"
    ]
  },
  {
    "objectID": "github.html#die-lmu-gp2-organisation",
    "href": "github.html#die-lmu-gp2-organisation",
    "title": "Github",
    "section": "Die LMU-GP2 Organisation",
    "text": "Die LMU-GP2 Organisation\nAlle Analyseprojekte werden in einem eigenen Git-Repositorium gespeichert. Um auf die Daten und Skripte der anderen zugreifen zu können, werden wir die Repositorien in der Github-Organisation LMU-GP2 speichern.\n\n\n\n\n\n\nÜbungen\n\n\n\n\nBitte Moritz, Teil der Organisation zu werden",
    "crumbs": [
      "Home",
      "Voraussetzungen",
      "Github"
    ]
  },
  {
    "objectID": "github.html#verbinde-rstudio-mit-github",
    "href": "github.html#verbinde-rstudio-mit-github",
    "title": "Github",
    "section": "Verbinde RStudio mit Github",
    "text": "Verbinde RStudio mit Github\nUm uns über Programme, wie RStudio mit Github verbinden zu können, brauchen wir einen Personal Access Token, den wir anstelle eine Passworts verwenden.\nErstelle Dir einen Token auf https://github.com/settings/tokens/ und kopiere ihn zunächst in ein leeres Dokument (z.B. Editor).\nWenn wir gleich das erste Mal ein Projekt von Github klonen bzw. es abspeichern, gibst du einmalig den Token als Passwort ein. Auf diesem Rechner ist er dann gespeichert.",
    "crumbs": [
      "Home",
      "Voraussetzungen",
      "Github"
    ]
  },
  {
    "objectID": "lmu-gp2.html",
    "href": "lmu-gp2.html",
    "title": "qpsy-Daten und LMU GP2-Projekte",
    "section": "",
    "text": "Wir haben folgende Quellen für Daten und Analyseprojekte:\n\n\nhttps://qpsy.de/data/\nDie Rohdaten aller Onlineexperimente werden auf unserem Webserver gespeichert (passwortgeschützt). Die Ordnerstruktur ist [experiment] / study[studypart], also z.B. [experiment] / study2 für den zweiten Teil einer Studie, etc.\nDie Anzahl an Versuchspersonenfiles kann auch ohne Passworteingabe nachgesehen werden, unter https://qpsy.de/count-ip.php?dir=[experiment], z.B. https://qpsy.de/count-ip.php?dir=testdata/study1\nManchmal sind die VP-Files innerhalb des Ordners in weiteren durchnummerierten Ordner gespeichert, welche dann den einzelnen Versuchsleitern entsprechen.\n\n\n\nWenn wir uns zum ersten Mal die Daten eines Forschungsprojekts ansehen, erstellen wir ein neues Projekt mit RStudio in einem neuen Ordner auf unserem Computer. Als Projektnamen entscheide ich mich in der Regel für den Projektnamen, so wie er auf dem Server gespeichert wird und hänge -analysis an, also z.B. testdata1-analysis für den ersten Studienteil des Experiments testdata.\nWir brauchen die Rohdaten nicht manuell vom Server herunterladen, sondern können das package qpsy dazu benutzen:\nlibrary(qpsy)\nraw &lt;- loadexp(\"testdata/study1\")\n\n\n\nhttps://github.com/lmu-gp2\nDamit die Analyseprojekte nachvollziehbar und vor allem teilbar sind, werden wir sie alle mit Github synchronisieren. Es macht generell also Sinn, erstmal in den Repositorien auf unserer Organisation LMU-GP2 nachzusehen, ob schon ein Analyseprojekt für das Experiment angelegt ist.\nJe nachdem, was der Fall ist, gibt es zwei unterschiedliche Workflows:\n\nEin vorhandenes Projekt klonen\nEin neues Projekt anlegen",
    "crumbs": [
      "Home",
      "Workflow",
      "qpsy-Daten und LMU GP2-Projekte"
    ]
  },
  {
    "objectID": "lmu-gp2.html#orientierung",
    "href": "lmu-gp2.html#orientierung",
    "title": "qpsy-Daten und LMU GP2-Projekte",
    "section": "",
    "text": "Wir haben folgende Quellen für Daten und Analyseprojekte:\n\n\nhttps://qpsy.de/data/\nDie Rohdaten aller Onlineexperimente werden auf unserem Webserver gespeichert (passwortgeschützt). Die Ordnerstruktur ist [experiment] / study[studypart], also z.B. [experiment] / study2 für den zweiten Teil einer Studie, etc.\nDie Anzahl an Versuchspersonenfiles kann auch ohne Passworteingabe nachgesehen werden, unter https://qpsy.de/count-ip.php?dir=[experiment], z.B. https://qpsy.de/count-ip.php?dir=testdata/study1\nManchmal sind die VP-Files innerhalb des Ordners in weiteren durchnummerierten Ordner gespeichert, welche dann den einzelnen Versuchsleitern entsprechen.\n\n\n\nWenn wir uns zum ersten Mal die Daten eines Forschungsprojekts ansehen, erstellen wir ein neues Projekt mit RStudio in einem neuen Ordner auf unserem Computer. Als Projektnamen entscheide ich mich in der Regel für den Projektnamen, so wie er auf dem Server gespeichert wird und hänge -analysis an, also z.B. testdata1-analysis für den ersten Studienteil des Experiments testdata.\nWir brauchen die Rohdaten nicht manuell vom Server herunterladen, sondern können das package qpsy dazu benutzen:\nlibrary(qpsy)\nraw &lt;- loadexp(\"testdata/study1\")\n\n\n\nhttps://github.com/lmu-gp2\nDamit die Analyseprojekte nachvollziehbar und vor allem teilbar sind, werden wir sie alle mit Github synchronisieren. Es macht generell also Sinn, erstmal in den Repositorien auf unserer Organisation LMU-GP2 nachzusehen, ob schon ein Analyseprojekt für das Experiment angelegt ist.\nJe nachdem, was der Fall ist, gibt es zwei unterschiedliche Workflows:\n\nEin vorhandenes Projekt klonen\nEin neues Projekt anlegen",
    "crumbs": [
      "Home",
      "Workflow",
      "qpsy-Daten und LMU GP2-Projekte"
    ]
  },
  {
    "objectID": "rco.html",
    "href": "rco.html",
    "title": "R, RStudio, und Packages",
    "section": "",
    "text": "https://cran.rstudio.com/\n\nR ist die Software, welche die Berechnungen (“unter der Motorhaube”) durchführt\nR heißt auch die Programmiersprache, welche von der Software genutzt wird",
    "crumbs": [
      "Home",
      "Voraussetzungen",
      "R und co."
    ]
  },
  {
    "objectID": "rco.html#r",
    "href": "rco.html#r",
    "title": "R, RStudio, und Packages",
    "section": "",
    "text": "https://cran.rstudio.com/\n\nR ist die Software, welche die Berechnungen (“unter der Motorhaube”) durchführt\nR heißt auch die Programmiersprache, welche von der Software genutzt wird",
    "crumbs": [
      "Home",
      "Voraussetzungen",
      "R und co."
    ]
  },
  {
    "objectID": "rco.html#rstudio",
    "href": "rco.html#rstudio",
    "title": "R, RStudio, und Packages",
    "section": "RStudio",
    "text": "RStudio\nhttps://posit.co/download/rstudio-desktop/\n\nWir nutzen RStudio, um mit R zu arbeiten, da die Software mehr Funktionalität anbietet\nWir brauchen trotzdem R, da RStudio auf unsere R-Installation zugreift",
    "crumbs": [
      "Home",
      "Voraussetzungen",
      "R und co."
    ]
  },
  {
    "objectID": "rco.html#packages-libraries",
    "href": "rco.html#packages-libraries",
    "title": "R, RStudio, und Packages",
    "section": "Packages / Libraries",
    "text": "Packages / Libraries\nEine besondere Stärke von R ist die Möglichkeit Packages zu nutzen, die in Libraries zur Verfügung gestellt werden (das kann als synonym betrachtet werden).\nPackages stammen üblicherweise aus einer von zwei Quellen:\n\nCRAN: Diese Packages können direkt in RStudio installiert werden via install.packages(\"libraryname\") bzw über den Reiter Packages &gt; Install\nGithub: Manche packages werden auf Github zur Verfügung gestellt. In der Regel gibt es auf deren Github-Seite eine Anleitung, wie sie über die RStudio-Console installiert werden, z.B.\n\n# Install remotes if necessary\nif (!requireNamespace(\"remotes\")) install.packages(\"remotes\")\n# Get package from Github\nremotes::install_github(\"mrzdcmps/changeofevidence\")",
    "crumbs": [
      "Home",
      "Voraussetzungen",
      "R und co."
    ]
  },
  {
    "objectID": "rco.html#updates",
    "href": "rco.html#updates",
    "title": "R, RStudio, und Packages",
    "section": "Updates",
    "text": "Updates\nEs ist sinnvoll, die Software und Packages regelmäßig zu updaten.\n\n\n\n\n\n\nÜbungen\n\n\n\n\nInstalliere bzw. update R und RStudio\nInstalliere das Package tidyverse von CRAN\nInstalliere die Packages qpsy und changeofevidence von Github\nUpdate alle Packages in RStudio",
    "crumbs": [
      "Home",
      "Voraussetzungen",
      "R und co."
    ]
  },
  {
    "objectID": "workwithgit.html",
    "href": "workwithgit.html",
    "title": "Die Projekte aktuell halten",
    "section": "",
    "text": "Da wir jetzt Git nutzen und ein remote auf Github besitzen, ändert sich der generelle Workflow etwas.\n\nAnalyseprojekt öffnen und mögliche Updates von Github pullen.\nÄnderungen am Skript, Berechnungen, etc. durchführen und die Dateien speichern.\nSind die Änderungen erfolgreich, den neuen Stand stagen (also die Kästchen im Git-Reiter aktivieren) und comitten. Dabei immer eine Nachricht eingeben.\nDen neuen Stand des Projekts wieder zu Github pushen.\n\nMan muss nicht nach jedem Commit pushen, sollte es aber regelmäßig tun.\nDie History im Git-Reiter erlaubt es dir, alle erfolgten Änderungen nachzuverfolgen. Man kann auch einen früheren Stand herstellen, allerdings nicht in RStudio, sondern nur via Code über das Terminal.\nNachdem der generelle Workflow etabliert ist, schauen wir uns an, wie wir Daten vom Webserver laden und auswerten können.",
    "crumbs": [
      "Home",
      "Workflow",
      "Die Projekte aktuell halten"
    ]
  },
  {
    "objectID": "getrawdata.html",
    "href": "getrawdata.html",
    "title": "Rohdaten herunterladen",
    "section": "",
    "text": "Ressourcen\n\n\n\nDieser Teil ist angelehnt an die qpsy Vignette.\n\n\nAls erstes wollen wir die Experimentaldaten vom Webserver laden. Dort sind sie als .csv-Dateien (comma separated values) gespeichert. Wir haben eine Datei pro Teilnahme mit einer Zeile pro Trial (dabei zählen auch Willkommen, Einverständniserklärung, etc. als Trial).\nBeim importieren der Rohdaten werden alle Dateien aneinander gehängt und bilden so eine Tabelle mit vielen Zeilen. Wir wollen diese Rohdatentabelle in ein Experimentalfile transformieren, welches 1 Zeile pro VP besitzt und in dem alle nötigen Variablen als Spalten vorhanden sind.\n\nLoad Libraries\n\nlibrary(qpsy)\nlibrary(tidyverse)\n\n\n\nRohdaten vom Server importieren\nloadexp() lädt die Rohdaten direkt vom Server herunter. Die Funktion hat mehrere Argumente:\n\nstudy: das Verzeichnis der Studiendaten (z. B. “testdata” oder “testdata/study2”)\nsubdirs: sollen Unterverzeichnisse einbezogen werden? (z. B. mehrere Studienteile “study1” und “study2” oder Dateien von verschiedenen Versuchsleitern).\nsplitresponse: sollen die Antworten auf Fragebogentrials als separate Variablen gespeichert werden? (z. B. “Alter”, “Geschlecht”, “questionnaire_item1” usw.)\nlocalcopy: sollen die Daten lokal gespeichert werden? (z. B. “testdata.rds”)\n\n\nraw &lt;- loadexp(\"testdata\", subdirs = TRUE, splitresponse = TRUE, localcopy = TRUE)\n\nLocal copy found.\n\n\nNo new files found. Using local copy.\n\n\n\n\nDaten inspizieren\njsPsych gibt eine Zeile pro Trial aus. In diesem Beispiel ist die erste Zeile die Sprachauswahl, die zweite die Einwilligungserklärung, die dritte die Begrüßungsseite, dann eine Umfrage und ein paar rng-Trials Du kannst print() verwenden, um die ersten Zeilen anzuzeigen, str(), um einen Überblick über die Struktur zu erhalten, d.h. alle Variablen (Spalten) und ihre Typen, und View(), um die Daten in einem neuen RStudio-Tab zu betrachten.\n\nprint(raw)\n\n# A tibble: 102 × 26\n    file rt    stimulus             response trial_type trial_index time_elapsed\n   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;                &lt;chr&gt;    &lt;chr&gt;            &lt;int&gt;        &lt;int&gt;\n 1     1 2704  \"img/language-b.png\" \"0\"      image-but…           0         2705\n 2     1 1630  \"\"                   \"\"       external-…           1         4341\n 3     1 777   \"\"                   \"\"       instructi…           2         5118\n 4     1 3108  \"\"                   \"{\\\"BLL… survey               3         8238\n 5     1 null  \"rng...\"             \"null\"   html-keyb…           4         8290\n 6     1 null  \"rng...\"             \"null\"   html-keyb…           5         8460\n 7     1 null  \"rng...\"             \"null\"   html-keyb…           6         8569\n 8     1 null  \"rng...\"             \"null\"   html-keyb…           7         8679\n 9     1 null  \"rng...\"             \"null\"   html-keyb…           8         8786\n10     1 null  \"rng...\"             \"null\"   html-keyb…           9         8893\n# ℹ 92 more rows\n# ℹ 19 more variables: internal_node_id &lt;chr&gt;, study &lt;chr&gt;, subject &lt;chr&gt;,\n#   time &lt;dttm&gt;, condition &lt;chr&gt;, url &lt;chr&gt;, view_history &lt;chr&gt;,\n#   test_part &lt;chr&gt;, accuracy &lt;chr&gt;, qbit &lt;int&gt;, BLLS_1 &lt;int&gt;, BLLS_2 &lt;int&gt;,\n#   BLLS_3 &lt;int&gt;, BLLS_4 &lt;int&gt;, age &lt;int&gt;, gender &lt;chr&gt;, bildung &lt;chr&gt;,\n#   handaufsherz &lt;chr&gt;, ungewoehnlich &lt;chr&gt;\n\nstr(raw)\n\ntibble [102 × 26] (S3: tbl_df/tbl/data.frame)\n $ file            : int [1:102] 1 1 1 1 1 1 1 1 1 1 ...\n $ rt              : chr [1:102] \"2704\" \"1630\" \"777\" \"3108\" ...\n $ stimulus        : chr [1:102] \"img/language-b.png\" \"\" \"\" \"\" ...\n $ response        : chr [1:102] \"0\" \"\" \"\" \"{\\\"BLLSIntro\\\":null,\\\"BLLS\\\":{\\\"BLLS_1\\\":0,\\\"BLLS_2\\\":1,\\\"BLLS_3\\\":2,\\\"BLLS_4\\\":3}}\" ...\n $ trial_type      : chr [1:102] \"image-button-response\" \"external-html\" \"instructions\" \"survey\" ...\n $ trial_index     : int [1:102] 0 1 2 3 4 5 6 7 8 9 ...\n $ time_elapsed    : int [1:102] 2705 4341 5118 8238 8290 8460 8569 8679 8786 8893 ...\n $ internal_node_id: chr [1:102] \"0.0-0.0\" \"0.0-1.0\" \"0.0-2.0\" \"0.0-3.0\" ...\n $ study           : chr [1:102] \"testdata1\" \"testdata1\" \"testdata1\" \"testdata1\" ...\n $ subject         : chr [1:102] \"sohh7gaopn0d6lm7\" \"sohh7gaopn0d6lm7\" \"sohh7gaopn0d6lm7\" \"sohh7gaopn0d6lm7\" ...\n $ time            : POSIXct[1:102], format: \"2024-06-15 16:51:05\" \"2024-06-15 16:51:05\" ...\n $ condition       : chr [1:102] \"exp\" \"exp\" \"exp\" \"exp\" ...\n $ url             : chr [1:102] \"\" \"consent/consent_mm.html\" \"\" \"\" ...\n $ view_history    : chr [1:102] \"\" \"\" \"[{\\\"page_index\\\":0,\\\"viewing_time\\\":777}]\" \"\" ...\n $ test_part       : chr [1:102] \"\" \"\" \"welcome\" \"BLLS\" ...\n $ accuracy        : chr [1:102] \"\" \"\" \"\" \"[]\" ...\n $ qbit            : int [1:102] NA NA NA NA 0 1 0 1 0 1 ...\n $ BLLS_1          : int [1:102] 0 0 0 0 0 0 0 0 0 0 ...\n $ BLLS_2          : int [1:102] 1 1 1 1 1 1 1 1 1 1 ...\n $ BLLS_3          : int [1:102] 2 2 2 2 2 2 2 2 2 2 ...\n $ BLLS_4          : int [1:102] 3 3 3 3 3 3 3 3 3 3 ...\n $ age             : int [1:102] 35 35 35 35 35 35 35 35 35 35 ...\n $ gender          : chr [1:102] \"männlich\" \"männlich\" \"männlich\" \"männlich\" ...\n $ bildung         : chr [1:102] \"Fach- oder Hochschulreife (Abitur)\" \"Fach- oder Hochschulreife (Abitur)\" \"Fach- oder Hochschulreife (Abitur)\" \"Fach- oder Hochschulreife (Abitur)\" ...\n $ handaufsherz    : chr [1:102] \"Ja\" \"Ja\" \"Ja\" \"Ja\" ...\n $ ungewoehnlich   : chr [1:102] \"Alles tip top!\" \"Alles tip top!\" \"Alles tip top!\" \"Alles tip top!\" ...\n\nView(raw)\n\nInteressante Variablen:\n\nfile: id der einzelnen Vp-Datei (zeitlich nicht geordnet)\nrt: Reaktionszeit in ms\nstimulus: präsentierter Stimulus/Text\nresponse: vom Teilnehmer gegebene Antwort (z.B. Taste, Button, Freitext)\nstudy: Name der Studie und Studienteil\nsubject: Subject-Id\ntime: Zeitpunkt der Datenerhebung (UTC+0)\nweitere Variablen, z. B. Bedingung, Gruppe, test_part, usw.",
    "crumbs": [
      "Home",
      "Datenauswertung",
      "Rohdaten herunterladen"
    ]
  },
  {
    "objectID": "expfile.html",
    "href": "expfile.html",
    "title": "Experimentalfile erstellen",
    "section": "",
    "text": "Tabelle mit 1 Zeile pro Teilnehmer erstellen\nWir wollen die Rohdaten, die eine Zeile pro Trial enthalten, in einen Data Frame (Tabelle) mit einer Zeile pro Teilnehmer umwandeln. Zusätzlich werden wir einige Bereinigungen, Umkodierungen und Transformationen durchführen.\nWichtige Funktionen:\n\ngroup_by(): Datenrahmen nach einer Variablen gruppieren (um Variablen pro Teilnehmer und nicht für alle Teilnehmer zu berechnen).\nmutate(): Hinzufügen neuer Variablen zum Data Frame.\ndistinct(): Nur einzigartige Zeilen behalten.\nselect(): Variablen (Spalten) auswählen.\nfilter(): Filtert Zeilen, die eine Bedingung erfüllen.\nrowwise(): Werte pro Zeile (= Teilnehmer) berechnen. Dies ist nützlich bei der Berechnung von Fragebogenergebnissen. Auflösen mit ungroup().\nsummarise(): Aggregiert Daten zu einer zusammenfassenden Statistik.\npivot_wider(): Mehrere Zeilen zu Spalten umwandeln.\n\n\ndf_all &lt;- raw %&gt;%                         # select raw data\n  group_by(file) %&gt;%                      # group by file = participations\n  mutate(hits = sum(qbit, na.rm=T)) %&gt;%   # sum up all qbits per file\n  distinct(file, .keep_all=T) %&gt;%         # keep only one row per file\n  select(-c(rt:internal_node_id, url:qbit)) %&gt;% \n                                          # drop unnecessary columns\n  mutate(                                 # reverse score BLLS_3 and BLLS_4 (0 -&gt; 4; 4 -&gt; 0)\n    BLLS_3 = -BLLS_3+4,\n    BLLS_4 = -BLLS_4+4,\n  ) %&gt;%                                   \n  mutate(                                 # if multiple languages, recode to English\n    gender = case_when(\n      gender %in% c(\"male\", \"männlich\") ~ \"male\",\n      gender %in% c(\"female\", \"weiblich\") ~ \"female\",\n      gender %in% c(\"divers\", \"other\") ~ \"other\"\n    )\n  ) %&gt;%\n  rowwise() %&gt;%                           # calculate scores per row / participant\n  mutate(BLLS_score = mean(c(BLLS_1, BLLS_2, BLLS_3, BLLS_4))) %&gt;% \n                                          # mean score of BLLS_1 to BLLS_4\n  ungroup() %&gt;%                           # ungroup data frame\n  arrange(time)                           # sort by time of data collection\n\nprint(df_all)\n\n# A tibble: 6 × 16\n   file study  subject time                condition BLLS_1 BLLS_2 BLLS_3 BLLS_4\n  &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;dttm&gt;              &lt;chr&gt;      &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1     1 testd… sohh7g… 2024-06-15 16:51:05 exp            0      1      2      1\n2     2 testd… u31kk1… 2024-06-15 16:51:36 exp            0      3      0      0\n3     3 testd… qlekt1… 2024-06-15 16:51:59 exp            1      0      4      2\n4     4 testd… rnlxf3… 2024-06-15 16:52:39 con            1      2      1      0\n5     5 testd… 6vmltu… 2024-06-16 12:18:22 con            3      3      0      0\n6     6 testd… pgbcm2… 2024-06-16 12:21:12 exp            0      4      1      3\n# ℹ 7 more variables: age &lt;int&gt;, gender &lt;chr&gt;, bildung &lt;chr&gt;,\n#   handaufsherz &lt;chr&gt;, ungewoehnlich &lt;chr&gt;, hits &lt;int&gt;, BLLS_score &lt;dbl&gt;\n\n\n\n\nWeitere Variablen zum Data Frame hinzufügen\nMöglicherweise gibt es in einigen Zeilen der Rohdaten Informationen, die wir unserem Experimentalfile hinzufügen möchten.\nWir können filter() verwenden, um Trials (=Zeilen) mit den relevanten Informationen auszuwählen, und mutate(), um neue Variablen zu den vorhandenen hinzuzufügen, oder summarise(), um einen Datensatz nur mit neuen Variablen zu erstellen. Wir können pivot_wider() verwenden, um mehrere Zeilen von einem Teilnehmer in eine Zeile mit mehreren Spalten umzuwandeln. Wir können diese neuen Data Frame an den bestehenden Data Frame mit left_join() anhängen.\nIn diesem Beispiel wollen wir die Antwort und die Reaktionszeit des button press trials sowie die einzelnen qbits jedes rng-trials hinzufügen.\n\n# We want to add the response of the button press trial and include the reaction times.\nbuttonChoice &lt;- raw %&gt;%\n  filter(test_part==\"buttonChoice\") %&gt;%   # filter for buttonChoice trials\n  mutate(rt = as.numeric(rt)) %&gt;%         # convert rt to numeric\n  group_by(file) %&gt;%                      # group by file = participations\n  summarise(buttonChoice = response, rtChoice = mean(rt))        \n                                          # print response and calculate mean reaction time per file (mean not actually necessary in case of 1 observation)\n\nprint(buttonChoice)\n\n# A tibble: 6 × 3\n   file buttonChoice rtChoice\n  &lt;int&gt; &lt;chr&gt;           &lt;dbl&gt;\n1     1 0                1003\n2     2 1                1679\n3     3 1                1351\n4     4 1                1251\n5     5 1                 965\n6     6 0                 999\n\n# We want to have the qbits of each trial as separate variables\nqbits &lt;- raw %&gt;%\n  filter(test_part==\"rngTrial\") %&gt;%       # filter for qbit trials\n  select(file, qbit) %&gt;%                  # select variables \"file\" and \"qbit\"\n  mutate(trial = rep(1:10, length(unique(file)))) %&gt;% \n                                          # create variable \"trial\" with values 1 to 10 to distinguish between trials\n  pivot_wider(id_cols = file, values_from = qbit, names_from = trial, names_prefix = \"qbit\") \n                                          # create separate variables for each qbit\n\nprint(qbits)\n\n# A tibble: 6 × 11\n   file qbit1 qbit2 qbit3 qbit4 qbit5 qbit6 qbit7 qbit8 qbit9 qbit10\n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;  &lt;int&gt;\n1     1     0     1     0     1     0     1     1     1     1      1\n2     2     1     0     0     0     1     1     0     0     0      1\n3     3     1     0     1     0     1     1     1     1     1      0\n4     4     1     1     1     0     0     1     0     0     1      0\n5     5     1     1     1     1     1     0     1     0     0      1\n6     6     0     0     1     1     0     1     0     1     0      0\n\n# Merge the new variables to the data frame\ndf_all &lt;- df_all %&gt;%\n  left_join(buttonChoice, by=\"file\") %&gt;%  # join buttonChoice to df_all\n  left_join(qbits, by=\"file\")             # join qbits to df_all\n\nprint(df_all)\n\n# A tibble: 6 × 28\n   file study  subject time                condition BLLS_1 BLLS_2 BLLS_3 BLLS_4\n  &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;dttm&gt;              &lt;chr&gt;      &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1     1 testd… sohh7g… 2024-06-15 16:51:05 exp            0      1      2      1\n2     2 testd… u31kk1… 2024-06-15 16:51:36 exp            0      3      0      0\n3     3 testd… qlekt1… 2024-06-15 16:51:59 exp            1      0      4      2\n4     4 testd… rnlxf3… 2024-06-15 16:52:39 con            1      2      1      0\n5     5 testd… 6vmltu… 2024-06-16 12:18:22 con            3      3      0      0\n6     6 testd… pgbcm2… 2024-06-16 12:21:12 exp            0      4      1      3\n# ℹ 19 more variables: age &lt;int&gt;, gender &lt;chr&gt;, bildung &lt;chr&gt;,\n#   handaufsherz &lt;chr&gt;, ungewoehnlich &lt;chr&gt;, hits &lt;int&gt;, BLLS_score &lt;dbl&gt;,\n#   buttonChoice &lt;chr&gt;, rtChoice &lt;dbl&gt;, qbit1 &lt;int&gt;, qbit2 &lt;int&gt;, qbit3 &lt;int&gt;,\n#   qbit4 &lt;int&gt;, qbit5 &lt;int&gt;, qbit6 &lt;int&gt;, qbit7 &lt;int&gt;, qbit8 &lt;int&gt;,\n#   qbit9 &lt;int&gt;, qbit10 &lt;int&gt;\n\n\n\n\nTeilnehmer ausschließen\nWir haben erfolgreich einen Data Frame mit 1 Zeile pro Teilnehmer erstellt. Nun möchten wir Teilnehmer ausschließen, die nicht in die Analyse einbezogen werden sollen. Dabei kann es sich um doppelte Teilnahmen, minderjährige Teilnehmer oder Teilnehmer handeln, die bei der Hand aufs Herz-Frage durchgefallen sind.\nWir können filter() verwenden, um Teilnehmer auf der Grundlage einer Bedingung auszuschließen, und distinct(), um nur eindeutige Teilnahmen eines Teilnehmers zu erhalten.\n\n# Check if there are duplicate subject ids\nanyDuplicated(df_all$subject)\n\n[1] 0\n\n# Create final data frame\ndf &lt;- df_all %&gt;%\n  distinct(subject, .keep_all = TRUE) %&gt;%  # keep only the first participation if a subject id is duplicated\n  filter(handaufsherz %in% c(\"Ja\", \"Yes\")) %&gt;% \n                                           # filter for participants who answered the data integrity question correctly\n  filter(age &gt;= 18)                        # use only participants over 18\n\n\n\nData Frame als CSV speichern\nWir können die Daten mit write_csv2() als .csv-Datei speichern, um sie z.B. mit JASP zu analysieren.\n\nwrite_csv2(df, \"testdata.csv\")",
    "crumbs": [
      "Home",
      "Datenauswertung",
      "Experimentalfile erstellen"
    ]
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "Datenanalyse",
    "section": "",
    "text": "Den finalen Datensatz beschreiben\nNun können wir die Daten auswerten. Zuerst sollten wir die deskriptiven Statistiken überprüfen.\nWir können describe() aus dem Paket psych für deskriptive Statistiken und table() für Häufigkeiten verwenden.\n\nlibrary(psych)\n\n\nAttache Paket: 'psych'\n\n\nDie folgenden Objekte sind maskiert von 'package:ggplot2':\n\n    %+%, alpha\n\ndf %&gt;%\n  select(age, hits, BLLS_score) %&gt;% # select which variables to describe\n  describe()                        # use describe() for descriptive statistics\n\n           vars n  mean    sd median trimmed  mad min max range  skew kurtosis\nage           1 4 34.00 14.45  30.00   34.00 9.64  22  54    32  0.46    -1.92\nhits          2 4  5.75  1.50   6.00    5.75 1.48   4   7     3 -0.14    -2.28\nBLLS_score    3 4  1.38  0.48   1.25    1.38 0.37   1   2     1  0.32    -2.08\n             se\nage        7.22\nhits       0.75\nBLLS_score 0.24\n\n# describe by group (condition)\ndescribeBy(hits + BLLS_score ~ condition, data=df)\n\n\n Descriptive statistics by group \ncondition: con\n           vars n mean   sd median trimmed  mad min max range skew kurtosis\nhits          1 2 6.00 1.41   6.00    6.00 1.48   5 7.0   2.0    0    -2.75\nBLLS_score    2 2 1.25 0.35   1.25    1.25 0.37   1 1.5   0.5    0    -2.75\n             se\nhits       1.00\nBLLS_score 0.25\n------------------------------------------------------------ \ncondition: exp\n           vars n mean   sd median trimmed  mad min max range skew kurtosis  se\nhits          1 2  5.5 2.12    5.5     5.5 2.22   4   7     3    0    -2.75 1.5\nBLLS_score    2 2  1.5 0.71    1.5     1.5 0.74   1   2     1    0    -2.75 0.5\n\ntable(df$gender)                    # use table() for frequencies\n\n\nfemale   male \n     2      2 \n\ntable(df$bildung)                   # use table() for frequencies\n\n\nFach- oder Hochschulreife (Abitur)                     Mittlere Reife \n                                 2                                  1 \n                 University degree \n                                 1 \n\n\n\n\nDaten analysieren und visualisieren\nSchließlich können wir unsere Analysen durchführen. Zum Beispiel können wir mit einem t-Test oder einer ANOVA nach Gruppenunterschieden suchen, oder wir können die Daten mit ggplot() visualisieren.\nWeitere Informationen zu Bayes’schen Tests mit dem Paket “changeofevidence” finden Sie unter changeofevidence t-test Vignette.\n\n# t-test for group differences in hits\nt.test(hits ~ condition, data=df, var.equal=T)\n\n\n    Two Sample t-test\n\ndata:  hits by condition\nt = 0.27735, df = 2, p-value = 0.8075\nalternative hypothesis: true difference in means between group con and group exp is not equal to 0\n95 percent confidence interval:\n -7.256718  8.256718\nsample estimates:\nmean in group con mean in group exp \n              6.0               5.5 \n\n# Bayesian t-test for group differences in hits\nlibrary(changeofevidence)\nbf &lt;- bfttest(hits ~ condition, data=df)\n\nWarning in bfttest(hits ~ condition, data = df): No alternative specified.\nUsing a two-sided alternative.\n\n\nIndependent Samples test (N = 4 [2 + 2])\nCalculating Sequential Bayes Factors...\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\nFinal Bayes Factor: 0.928946 (t=0.2773501; p=0.8075499)\n\nplot(bf)\n\n\n\n\n\n\n\n# ANOVA for gender differences in BLLS_score\nanova &lt;- aov(df$BLLS_score ~ df$gender)\nsummary(anova)\n\n            Df Sum Sq Mean Sq F value Pr(&gt;F)\ndf$gender    1 0.0625  0.0625     0.2  0.698\nResiduals    2 0.6250  0.3125               \n\n# Plot scatterplot of hits and BLLS_score\nggplot(df, aes(x=hits, y=BLLS_score, color=condition)) +\n  geom_point() +\n  theme_minimal()",
    "crumbs": [
      "Home",
      "Datenauswertung",
      "Datenanalyse"
    ]
  },
  {
    "objectID": "copilot.html",
    "href": "copilot.html",
    "title": "Copilot: Die Power der KI nutzen",
    "section": "",
    "text": "Als Dozierende oder Studierende der LMU können wir einen kostenlosen Github Pro-Account beantragen und Githubs eigene KI Copilot nutzen.",
    "crumbs": [
      "Home",
      "Bonus: Copilot",
      "Copilot: Die Power der KI nutzen"
    ]
  },
  {
    "objectID": "copilot.html#github-education-account-aktivieren",
    "href": "copilot.html#github-education-account-aktivieren",
    "title": "Copilot: Die Power der KI nutzen",
    "section": "Github Education Account aktivieren",
    "text": "Github Education Account aktivieren\n\nGehe zu Github Education und klicke auf Join Github Education\nFalls Dein Account nicht mit der LMU-Emailadresse registriert wurde, füge sie nun hinzu.\nSuche Ludwig Maximilian University of Munich in der Liste der Schulen.\nBeantworte die Fragen zur Nutzung.",
    "crumbs": [
      "Home",
      "Bonus: Copilot",
      "Copilot: Die Power der KI nutzen"
    ]
  },
  {
    "objectID": "copilot.html#aktiviere-copilot-in-github",
    "href": "copilot.html#aktiviere-copilot-in-github",
    "title": "Copilot: Die Power der KI nutzen",
    "section": "Aktiviere Copilot in Github",
    "text": "Aktiviere Copilot in Github\nGehe zu Github Copilot und klicke auf Sign in with GitHub\noder\nGehe in deine Github-Einstellungen und aktiviere Copilot.",
    "crumbs": [
      "Home",
      "Bonus: Copilot",
      "Copilot: Die Power der KI nutzen"
    ]
  },
  {
    "objectID": "copilot.html#aktiviere-copilot-in-rstudio",
    "href": "copilot.html#aktiviere-copilot-in-rstudio",
    "title": "Copilot: Die Power der KI nutzen",
    "section": "Aktiviere Copilot in RStudio",
    "text": "Aktiviere Copilot in RStudio\n\nGehe in die Einstellungen unter Tools &gt; Global Options &gt; Copilot und aktiviere die Nutzung von Copilot.\nEntscheide, ob du Vorschläge automatisch oder manuell erhalten möchtest.\nLogge Dich in Deinen Github-Account ein.",
    "crumbs": [
      "Home",
      "Bonus: Copilot",
      "Copilot: Die Power der KI nutzen"
    ]
  },
  {
    "objectID": "copilot.html#arbeite-mit-copilot",
    "href": "copilot.html#arbeite-mit-copilot",
    "title": "Copilot: Die Power der KI nutzen",
    "section": "Arbeite mit Copilot",
    "text": "Arbeite mit Copilot\nAm Besten funktioniert Copilot, wenn du ihm genau sagst, was du tun möchtest. Dafür eignen sich Kommentare im Code. Diese beginnen mit einer Raute # und einem Leerzeichen. Hier ein Beispiel:\n# Berechne die Summe der Zahlen 1 bis 10\nsum(1:10)",
    "crumbs": [
      "Home",
      "Bonus: Copilot",
      "Copilot: Die Power der KI nutzen"
    ]
  }
]